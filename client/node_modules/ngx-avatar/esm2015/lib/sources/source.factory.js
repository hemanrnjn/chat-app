/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { Facebook } from "./facebook";
import { Twitter } from "./twitter";
import { Google } from "./google";
import { Custom } from "./custom";
import { Initials } from "./initials";
import { Gravatar } from "./gravatar";
import { Skype } from "./skype";
import { Value } from "./value";
import { Vkontakte } from "./vkontakte";
import { Github } from "./github";
import { Injectable } from "@angular/core";
import { AvatarSource } from "./avatar-source.enum";
/**
 * Factory class that implements factory method pattern.
 * Used to create Source implementation class based
 * on the source Type
 */
export class SourceFactory {
    constructor() {
        this.sources = {};
        this.sources[AvatarSource.FACEBOOK] = Facebook;
        this.sources[AvatarSource.TWITTER] = Twitter;
        this.sources[AvatarSource.GOOGLE] = Google;
        this.sources[AvatarSource.SKYPE] = Skype;
        this.sources[AvatarSource.GRAVATAR] = Gravatar;
        this.sources[AvatarSource.CUSTOM] = Custom;
        this.sources[AvatarSource.INITIALS] = Initials;
        this.sources[AvatarSource.VALUE] = Value;
        this.sources[AvatarSource.VKONTAKTE] = Vkontakte;
        this.sources[AvatarSource.GITHUB] = Github;
    }
    /**
     * @param {?} sourceType
     * @param {?} sourceValue
     * @return {?}
     */
    newInstance(sourceType, sourceValue) {
        return new this.sources[sourceType](sourceValue);
    }
}
SourceFactory.decorators = [
    { type: Injectable }
];
/** @nocollapse */
SourceFactory.ctorParameters = () => [];
if (false) {
    /** @type {?} */
    SourceFactory.prototype.sources;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic291cmNlLmZhY3RvcnkuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtYXZhdGFyLyIsInNvdXJjZXMiOlsibGliL3NvdXJjZXMvc291cmNlLmZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUNBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDdEMsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUNwQyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ2xDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDbEMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUN0QyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDaEMsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUNoQyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFFbEMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7Ozs7OztBQVFwRCxNQUFNLE9BQU8sYUFBYTtJQUd4QjtRQUZRLFlBQU8sR0FBcUMsRUFBRSxDQUFDO1FBR3JELElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxHQUFHLFFBQVEsQ0FBQztRQUMvQyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsR0FBRyxPQUFPLENBQUM7UUFDN0MsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDO1FBQzNDLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxHQUFHLEtBQUssQ0FBQztRQUN6QyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsR0FBRyxRQUFRLENBQUM7UUFDL0MsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDO1FBQzNDLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxHQUFHLFFBQVEsQ0FBQztRQUMvQyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUM7UUFDekMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLEdBQUcsU0FBUyxDQUFDO1FBQ2pELElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxHQUFHLE1BQU0sQ0FBQztJQUM3QyxDQUFDOzs7Ozs7SUFFTSxXQUFXLENBQUMsVUFBd0IsRUFBRSxXQUFtQjtRQUM5RCxPQUFPLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUNuRCxDQUFDOzs7WUFuQkYsVUFBVTs7Ozs7O0lBRVQsZ0NBQXVEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU291cmNlIH0gZnJvbSBcIi4vc291cmNlXCI7XG5pbXBvcnQgeyBGYWNlYm9vayB9IGZyb20gXCIuL2ZhY2Vib29rXCI7XG5pbXBvcnQgeyBUd2l0dGVyIH0gZnJvbSBcIi4vdHdpdHRlclwiO1xuaW1wb3J0IHsgR29vZ2xlIH0gZnJvbSBcIi4vZ29vZ2xlXCI7XG5pbXBvcnQgeyBDdXN0b20gfSBmcm9tIFwiLi9jdXN0b21cIjtcbmltcG9ydCB7IEluaXRpYWxzIH0gZnJvbSBcIi4vaW5pdGlhbHNcIjtcbmltcG9ydCB7IEdyYXZhdGFyIH0gZnJvbSBcIi4vZ3JhdmF0YXJcIjtcbmltcG9ydCB7IFNreXBlIH0gZnJvbSBcIi4vc2t5cGVcIjtcbmltcG9ydCB7IFZhbHVlIH0gZnJvbSBcIi4vdmFsdWVcIjtcbmltcG9ydCB7IFZrb250YWt0ZSB9IGZyb20gXCIuL3Zrb250YWt0ZVwiO1xuaW1wb3J0IHsgR2l0aHViIH0gZnJvbSBcIi4vZ2l0aHViXCI7XG5cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgU291cmNlQ3JlYXRvciB9IGZyb20gXCIuL3NvdXJjZS5jcmVhdG9yXCI7XG5pbXBvcnQgeyBBdmF0YXJTb3VyY2UgfSBmcm9tIFwiLi9hdmF0YXItc291cmNlLmVudW1cIjtcblxuLyoqXG4gKiBGYWN0b3J5IGNsYXNzIHRoYXQgaW1wbGVtZW50cyBmYWN0b3J5IG1ldGhvZCBwYXR0ZXJuLlxuICogVXNlZCB0byBjcmVhdGUgU291cmNlIGltcGxlbWVudGF0aW9uIGNsYXNzIGJhc2VkXG4gKiBvbiB0aGUgc291cmNlIFR5cGVcbiAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFNvdXJjZUZhY3Rvcnkge1xuICBwcml2YXRlIHNvdXJjZXM6IHsgW2tleTogc3RyaW5nXTogU291cmNlQ3JlYXRvciB9ID0ge307XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5zb3VyY2VzW0F2YXRhclNvdXJjZS5GQUNFQk9PS10gPSBGYWNlYm9vaztcbiAgICB0aGlzLnNvdXJjZXNbQXZhdGFyU291cmNlLlRXSVRURVJdID0gVHdpdHRlcjtcbiAgICB0aGlzLnNvdXJjZXNbQXZhdGFyU291cmNlLkdPT0dMRV0gPSBHb29nbGU7XG4gICAgdGhpcy5zb3VyY2VzW0F2YXRhclNvdXJjZS5TS1lQRV0gPSBTa3lwZTtcbiAgICB0aGlzLnNvdXJjZXNbQXZhdGFyU291cmNlLkdSQVZBVEFSXSA9IEdyYXZhdGFyO1xuICAgIHRoaXMuc291cmNlc1tBdmF0YXJTb3VyY2UuQ1VTVE9NXSA9IEN1c3RvbTtcbiAgICB0aGlzLnNvdXJjZXNbQXZhdGFyU291cmNlLklOSVRJQUxTXSA9IEluaXRpYWxzO1xuICAgIHRoaXMuc291cmNlc1tBdmF0YXJTb3VyY2UuVkFMVUVdID0gVmFsdWU7XG4gICAgdGhpcy5zb3VyY2VzW0F2YXRhclNvdXJjZS5WS09OVEFLVEVdID0gVmtvbnRha3RlO1xuICAgIHRoaXMuc291cmNlc1tBdmF0YXJTb3VyY2UuR0lUSFVCXSA9IEdpdGh1YjtcbiAgfVxuXG4gIHB1YmxpYyBuZXdJbnN0YW5jZShzb3VyY2VUeXBlOiBBdmF0YXJTb3VyY2UsIHNvdXJjZVZhbHVlOiBzdHJpbmcpOiBTb3VyY2Uge1xuICAgIHJldHVybiBuZXcgdGhpcy5zb3VyY2VzW3NvdXJjZVR5cGVdKHNvdXJjZVZhbHVlKTtcbiAgfVxufVxuIl19