/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter, ElementRef } from "@angular/core";
import { AsyncSource } from "./sources/async-source";
import { SourceFactory } from "./sources/source.factory";
import { AvatarService } from "./avatar.service";
import { AvatarSource } from "./sources/avatar-source.enum";
/**
 * Universal avatar component that
 * generates avatar from different sources
 *
 * export
 * class AvatarComponent
 * implements {OnChanges}
 */
export class AvatarComponent {
    /**
     * @param {?} elementRef
     * @param {?} sourceFactory
     * @param {?} avatarService
     */
    constructor(elementRef, sourceFactory, avatarService) {
        this.elementRef = elementRef;
        this.sourceFactory = sourceFactory;
        this.avatarService = avatarService;
        this.round = true;
        this.size = 50;
        this.textSizeRatio = 3;
        this.fgColor = "#FFF";
        this.style = {};
        this.cornerRadius = 0;
        this.clickOnAvatar = new EventEmitter();
        this.avatarStyle = {};
        this.hostStyle = {};
        this._currentSource = 0;
        this._sources = Array();
    }
    // handle click event
    /**
     * @param {?} event
     * @return {?}
     */
    handleClickEvent(event) {
        if (event) {
            this.clickOnAvatar.emit(this._sources[this._currentSource - 1]);
        }
    }
    /**
     * Detect inputs change
     *
     * param {{ [propKey: string]: SimpleChange }} changes
     *
     * memberof AvatarComponent
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        for (const propName in changes) {
            if (this.avatarService.isSource(propName)) {
                /** @type {?} */
                const currentValue = changes[propName].currentValue;
                this._addSource(AvatarSource[propName.toUpperCase()], currentValue);
            }
        }
        // reintialize the avatar component when a source property value has changed
        // the fallback system must be re-invoked with the new values.
        this._initializeAvatar();
    }
    /**
     * Initialize the avatar component and its fallback system
     * @return {?}
     */
    _initializeAvatar() {
        this._currentSource = 0;
        if (this._sources.length > 0 && this._sources[this._currentSource]) {
            // Order sources array by source priority
            this._sources.sort((source1, source2) => this.avatarService.copmareSources(source1.sourceType, source2.sourceType));
            // Host style
            this.hostStyle = {
                width: this.size + "px",
                height: this.size + "px"
            };
            // Fetch avatar source
            this.fetch();
        }
    }
    /**
     * Fetch avatar source
     *
     * param {any} event
     *
     * memberOf AvatarComponent
     * @param {?=} event
     * @return {?}
     */
    fetch(event) {
        /** @type {?} */
        const avatarSource = this._sources[this._currentSource];
        if (!avatarSource) {
            return false;
        }
        if (this.avatarService.isTextAvatar(avatarSource.sourceType)) {
            this.data = avatarSource.getAvatar(this.initialsSize);
            this.src = undefined;
            this.avatarStyle = this._initialsStyle(avatarSource.sourceId);
        }
        else {
            this.avatarStyle = this._imageStyle();
            if (avatarSource instanceof AsyncSource) {
                this._fetchAsyncAvatar(avatarSource);
            }
            else {
                this.src = avatarSource.getAvatar(this.size);
            }
        }
        this._currentSource++;
    }
    /**
     *
     * returns initials style
     *
     * memberOf AvatarComponent
     * @param {?} avatarValue
     * @return {?}
     */
    _initialsStyle(avatarValue) {
        return Object.assign({ textAlign: "center", borderRadius: this.round ? "100%" : this.cornerRadius + "px", border: this.borderColor ? "1px solid " + this.borderColor : "", textTransform: "uppercase", color: this.fgColor, backgroundColor: this.bgColor
                ? this.bgColor
                : this.avatarService.getRandomColor(avatarValue), font: Math.floor(this.size / this.textSizeRatio) +
                "px Helvetica, Arial, sans-serif", lineHeight: this.size + "px" }, this.style);
    }
    /**
     *
     * returns image style
     *
     * memberOf AvatarComponent
     * @return {?}
     */
    _imageStyle() {
        return Object.assign({ maxWidth: "100%", borderRadius: this.round ? "50%" : this.cornerRadius + "px", border: this.borderColor ? "1px solid " + this.borderColor : "", width: this.size, height: this.size }, this.style);
    }
    /**
     * Fetch avatar image asynchrounsly.
     *
     * param {Source} source represents avatar source
     * memberof AvatarComponent
     * @param {?} source
     * @return {?}
     */
    _fetchAsyncAvatar(source) {
        this.avatarService.fetchAvatar(source.getAvatar()).subscribe(data => {
            // extract avatar image from the response data
            this.src = source.processResponse(data, this.size);
        }, err => {
            console.error(`ngx-avatar: error while fetching ${source.sourceType} avatar `);
        });
    }
    /**
     * Add avatar source
     *
     * param sourceType avatar source type e.g facebook,twitter, etc.
     * param sourceValue  source value e.g facebookId value, etc.
     * @param {?} sourceType
     * @param {?} sourceValue
     * @return {?}
     */
    _addSource(sourceType, sourceValue) {
        if (sourceValue) {
            if (!this._updateExistingSource(sourceType, sourceValue)) {
                this._sources.push(this.sourceFactory.newInstance(sourceType, sourceValue));
            }
        }
    }
    /**
     * This method check wether an avatar source has been added. If so
     * the source value will be updated with the new value passed as
     * paramater.
     * It returns true if the source exists and update has been performed,
     * returns false if the source was not found
     *
     * param {string} sourceType the type of the source
     * param {string} sourceValue the new value of the source
     *
     * memberof AvatarComponent
     * @param {?} sourceType
     * @param {?} sourceValue
     * @return {?}
     */
    _updateExistingSource(sourceType, sourceValue) {
        /** @type {?} */
        const sourceIndex = this._sources.findIndex(source => source.sourceType === sourceType.toUpperCase());
        if (sourceIndex > -1) {
            this._sources[sourceIndex].sourceId = sourceValue;
            return true;
        }
        return false;
    }
}
AvatarComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: "ngx-avatar",
                template: `
    <div (click)="handleClickEvent($event)" class="avatar-container" [ngStyle]="hostStyle">
    <img *ngIf="src"
      [src]="src"
      [width]="size"
      [height]="size"
      [ngStyle]="avatarStyle"
      (error)="fetch($event)"
      class="avatar-content"
     />

   <div *ngIf="data && !src"
     [ngStyle]="avatarStyle"
     class="avatar-content">{{data}}</div>
   </div>`,
                styles: [`
      :host {
        border-radius: "50%";
      }
    `]
            }] }
];
/** @nocollapse */
AvatarComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: SourceFactory },
    { type: AvatarService }
];
AvatarComponent.propDecorators = {
    round: [{ type: Input }],
    size: [{ type: Input }],
    textSizeRatio: [{ type: Input }],
    bgColor: [{ type: Input }],
    fgColor: [{ type: Input }],
    borderColor: [{ type: Input }],
    style: [{ type: Input }],
    cornerRadius: [{ type: Input }],
    facebook: [{ type: Input, args: ["facebookId",] }],
    twitter: [{ type: Input, args: ["twitterId",] }],
    google: [{ type: Input, args: ["googleId",] }],
    vkontakte: [{ type: Input, args: ["vkontakteId",] }],
    skype: [{ type: Input, args: ["skypeId",] }],
    gravatar: [{ type: Input, args: ["gravatarId",] }],
    github: [{ type: Input, args: ["githubId",] }],
    custom: [{ type: Input, args: ["src",] }],
    initials: [{ type: Input, args: ["name",] }],
    value: [{ type: Input, args: ["value",] }],
    placeholder: [{ type: Input, args: ["placeholder",] }],
    initialsSize: [{ type: Input, args: ["initialsSize",] }],
    clickOnAvatar: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    AvatarComponent.prototype.round;
    /** @type {?} */
    AvatarComponent.prototype.size;
    /** @type {?} */
    AvatarComponent.prototype.textSizeRatio;
    /** @type {?} */
    AvatarComponent.prototype.bgColor;
    /** @type {?} */
    AvatarComponent.prototype.fgColor;
    /** @type {?} */
    AvatarComponent.prototype.borderColor;
    /** @type {?} */
    AvatarComponent.prototype.style;
    /** @type {?} */
    AvatarComponent.prototype.cornerRadius;
    /** @type {?} */
    AvatarComponent.prototype.facebook;
    /** @type {?} */
    AvatarComponent.prototype.twitter;
    /** @type {?} */
    AvatarComponent.prototype.google;
    /** @type {?} */
    AvatarComponent.prototype.vkontakte;
    /** @type {?} */
    AvatarComponent.prototype.skype;
    /** @type {?} */
    AvatarComponent.prototype.gravatar;
    /** @type {?} */
    AvatarComponent.prototype.github;
    /** @type {?} */
    AvatarComponent.prototype.custom;
    /** @type {?} */
    AvatarComponent.prototype.initials;
    /** @type {?} */
    AvatarComponent.prototype.value;
    /** @type {?} */
    AvatarComponent.prototype.placeholder;
    /** @type {?} */
    AvatarComponent.prototype.initialsSize;
    /** @type {?} */
    AvatarComponent.prototype.clickOnAvatar;
    /** @type {?} */
    AvatarComponent.prototype.src;
    /** @type {?} */
    AvatarComponent.prototype.data;
    /** @type {?} */
    AvatarComponent.prototype.avatarStyle;
    /** @type {?} */
    AvatarComponent.prototype.hostStyle;
    /** @type {?} */
    AvatarComponent.prototype._currentSource;
    /** @type {?} */
    AvatarComponent.prototype._sources;
    /** @type {?} */
    AvatarComponent.prototype.elementRef;
    /** @type {?} */
    AvatarComponent.prototype.sourceFactory;
    /** @type {?} */
    AvatarComponent.prototype.avatarService;
}
//# sourceMappingURL=data:application/json;base64,