/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { Facebook } from "./facebook";
import { Twitter } from "./twitter";
import { Google } from "./google";
import { Custom } from "./custom";
import { Initials } from "./initials";
import { Gravatar } from "./gravatar";
import { Skype } from "./skype";
import { Value } from "./value";
import { Vkontakte } from "./vkontakte";
import { Github } from "./github";
import { Injectable } from "@angular/core";
import { AvatarSource } from "./avatar-source.enum";
/**
 * Factory class that implements factory method pattern.
 * Used to create Source implementation class based
 * on the source Type
 */
var SourceFactory = /** @class */ (function () {
    function SourceFactory() {
        this.sources = {};
        this.sources[AvatarSource.FACEBOOK] = Facebook;
        this.sources[AvatarSource.TWITTER] = Twitter;
        this.sources[AvatarSource.GOOGLE] = Google;
        this.sources[AvatarSource.SKYPE] = Skype;
        this.sources[AvatarSource.GRAVATAR] = Gravatar;
        this.sources[AvatarSource.CUSTOM] = Custom;
        this.sources[AvatarSource.INITIALS] = Initials;
        this.sources[AvatarSource.VALUE] = Value;
        this.sources[AvatarSource.VKONTAKTE] = Vkontakte;
        this.sources[AvatarSource.GITHUB] = Github;
    }
    /**
     * @param {?} sourceType
     * @param {?} sourceValue
     * @return {?}
     */
    SourceFactory.prototype.newInstance = /**
     * @param {?} sourceType
     * @param {?} sourceValue
     * @return {?}
     */
    function (sourceType, sourceValue) {
        return new this.sources[sourceType](sourceValue);
    };
    SourceFactory.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    SourceFactory.ctorParameters = function () { return []; };
    return SourceFactory;
}());
export { SourceFactory };
if (false) {
    /** @type {?} */
    SourceFactory.prototype.sources;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic291cmNlLmZhY3RvcnkuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtYXZhdGFyLyIsInNvdXJjZXMiOlsibGliL3NvdXJjZXMvc291cmNlLmZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUNBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDdEMsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUNwQyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ2xDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDbEMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUN0QyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDaEMsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUNoQyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFFbEMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7Ozs7OztBQU9wRDtJQUlFO1FBRlEsWUFBTyxHQUFxQyxFQUFFLENBQUM7UUFHckQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLEdBQUcsUUFBUSxDQUFDO1FBQy9DLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxHQUFHLE9BQU8sQ0FBQztRQUM3QyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsR0FBRyxNQUFNLENBQUM7UUFDM0MsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDO1FBQ3pDLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxHQUFHLFFBQVEsQ0FBQztRQUMvQyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsR0FBRyxNQUFNLENBQUM7UUFDM0MsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLEdBQUcsUUFBUSxDQUFDO1FBQy9DLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxHQUFHLEtBQUssQ0FBQztRQUN6QyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsR0FBRyxTQUFTLENBQUM7UUFDakQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDO0lBQzdDLENBQUM7Ozs7OztJQUVNLG1DQUFXOzs7OztJQUFsQixVQUFtQixVQUF3QixFQUFFLFdBQW1CO1FBQzlELE9BQU8sSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ25ELENBQUM7O2dCQW5CRixVQUFVOzs7O0lBb0JYLG9CQUFDO0NBQUEsQUFwQkQsSUFvQkM7U0FuQlksYUFBYTs7O0lBQ3hCLGdDQUF1RCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNvdXJjZSB9IGZyb20gXCIuL3NvdXJjZVwiO1xuaW1wb3J0IHsgRmFjZWJvb2sgfSBmcm9tIFwiLi9mYWNlYm9va1wiO1xuaW1wb3J0IHsgVHdpdHRlciB9IGZyb20gXCIuL3R3aXR0ZXJcIjtcbmltcG9ydCB7IEdvb2dsZSB9IGZyb20gXCIuL2dvb2dsZVwiO1xuaW1wb3J0IHsgQ3VzdG9tIH0gZnJvbSBcIi4vY3VzdG9tXCI7XG5pbXBvcnQgeyBJbml0aWFscyB9IGZyb20gXCIuL2luaXRpYWxzXCI7XG5pbXBvcnQgeyBHcmF2YXRhciB9IGZyb20gXCIuL2dyYXZhdGFyXCI7XG5pbXBvcnQgeyBTa3lwZSB9IGZyb20gXCIuL3NreXBlXCI7XG5pbXBvcnQgeyBWYWx1ZSB9IGZyb20gXCIuL3ZhbHVlXCI7XG5pbXBvcnQgeyBWa29udGFrdGUgfSBmcm9tIFwiLi92a29udGFrdGVcIjtcbmltcG9ydCB7IEdpdGh1YiB9IGZyb20gXCIuL2dpdGh1YlwiO1xuXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IFNvdXJjZUNyZWF0b3IgfSBmcm9tIFwiLi9zb3VyY2UuY3JlYXRvclwiO1xuaW1wb3J0IHsgQXZhdGFyU291cmNlIH0gZnJvbSBcIi4vYXZhdGFyLXNvdXJjZS5lbnVtXCI7XG5cbi8qKlxuICogRmFjdG9yeSBjbGFzcyB0aGF0IGltcGxlbWVudHMgZmFjdG9yeSBtZXRob2QgcGF0dGVybi5cbiAqIFVzZWQgdG8gY3JlYXRlIFNvdXJjZSBpbXBsZW1lbnRhdGlvbiBjbGFzcyBiYXNlZFxuICogb24gdGhlIHNvdXJjZSBUeXBlXG4gKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBTb3VyY2VGYWN0b3J5IHtcbiAgcHJpdmF0ZSBzb3VyY2VzOiB7IFtrZXk6IHN0cmluZ106IFNvdXJjZUNyZWF0b3IgfSA9IHt9O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuc291cmNlc1tBdmF0YXJTb3VyY2UuRkFDRUJPT0tdID0gRmFjZWJvb2s7XG4gICAgdGhpcy5zb3VyY2VzW0F2YXRhclNvdXJjZS5UV0lUVEVSXSA9IFR3aXR0ZXI7XG4gICAgdGhpcy5zb3VyY2VzW0F2YXRhclNvdXJjZS5HT09HTEVdID0gR29vZ2xlO1xuICAgIHRoaXMuc291cmNlc1tBdmF0YXJTb3VyY2UuU0tZUEVdID0gU2t5cGU7XG4gICAgdGhpcy5zb3VyY2VzW0F2YXRhclNvdXJjZS5HUkFWQVRBUl0gPSBHcmF2YXRhcjtcbiAgICB0aGlzLnNvdXJjZXNbQXZhdGFyU291cmNlLkNVU1RPTV0gPSBDdXN0b207XG4gICAgdGhpcy5zb3VyY2VzW0F2YXRhclNvdXJjZS5JTklUSUFMU10gPSBJbml0aWFscztcbiAgICB0aGlzLnNvdXJjZXNbQXZhdGFyU291cmNlLlZBTFVFXSA9IFZhbHVlO1xuICAgIHRoaXMuc291cmNlc1tBdmF0YXJTb3VyY2UuVktPTlRBS1RFXSA9IFZrb250YWt0ZTtcbiAgICB0aGlzLnNvdXJjZXNbQXZhdGFyU291cmNlLkdJVEhVQl0gPSBHaXRodWI7XG4gIH1cblxuICBwdWJsaWMgbmV3SW5zdGFuY2Uoc291cmNlVHlwZTogQXZhdGFyU291cmNlLCBzb3VyY2VWYWx1ZTogc3RyaW5nKTogU291cmNlIHtcbiAgICByZXR1cm4gbmV3IHRoaXMuc291cmNlc1tzb3VyY2VUeXBlXShzb3VyY2VWYWx1ZSk7XG4gIH1cbn1cbiJdfQ==