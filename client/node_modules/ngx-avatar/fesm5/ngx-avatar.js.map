{"version":3,"file":"ngx-avatar.js.map","sources":["ng://ngx-avatar/lib/sources/async-source.ts","ng://ngx-avatar/lib/sources/avatar-source.enum.ts","ng://ngx-avatar/lib/sources/facebook.ts","ng://ngx-avatar/lib/sources/twitter.ts","ng://ngx-avatar/lib/sources/google.ts","ng://ngx-avatar/lib/sources/custom.ts","ng://ngx-avatar/lib/sources/initials.ts","ng://ngx-avatar/lib/sources/gravatar.ts","ng://ngx-avatar/lib/sources/skype.ts","ng://ngx-avatar/lib/sources/value.ts","ng://ngx-avatar/lib/sources/vkontakte.ts","ng://ngx-avatar/lib/sources/github.ts","ng://ngx-avatar/lib/sources/source.factory.ts","ng://ngx-avatar/lib/avatar-config.token.ts","ng://ngx-avatar/lib/avatar.service.ts","ng://ngx-avatar/lib/avatar.component.ts","ng://ngx-avatar/lib/avatar.module.ts"],"sourcesContent":["import { Source } from './source';\nimport { AvatarSource } from './avatar-source.enum';\n\n/**\n * Contract of all async sources.\n * Every async source must implement the processResponse method that extracts the avatar url from the data\n */\nexport abstract class AsyncSource implements Source {\n  readonly sourceType: AvatarSource;\n\n  constructor(public sourceId: string) { }\n\n  abstract getAvatar(size?: number): string;\n  abstract processResponse(data: any, size?: number): string;\n\n}\n","export enum AvatarSource {\n  FACEBOOK = \"facebook\",\n  GOOGLE = \"google\",\n  TWITTER = \"twitter\",\n  VKONTAKTE = \"vkontakte\",\n  SKYPE = \"skype\",\n  GRAVATAR = \"gravatar\",\n  GITHUB = \"github\",\n  CUSTOM = \"custom\",\n  INITIALS = \"initials\",\n  VALUE = \"value\"\n}\n","import { Source } from './source';\nimport { AvatarSource } from './avatar-source.enum';\n/**\n *  Facebook source impelementation.\n *  Fetch avatar source based on facebook identifier\n *  and image size\n */\nexport class Facebook implements Source {\n  readonly sourceType: AvatarSource = AvatarSource.FACEBOOK;\n\n  constructor(public sourceId: string) {\n  }\n\n  public getAvatar(size: number): string {\n    return 'https://graph.facebook.com/' +\n      `${this.sourceId}/picture?width=${size}&height=${size}`;\n  }\n}\n","import { Source } from './source';\nimport { AvatarSource } from './avatar-source.enum';\n\n/**\n *  Twitter source impelementation.\n *  Fetch avatar source based on google identifier\n *  and image size\n */\nexport class Twitter implements Source {\n  readonly sourceType: AvatarSource = AvatarSource.TWITTER;\n\n  constructor(public sourceId: string) {\n  }\n\n  public getAvatar(size: number): string {\n    const twitterImgSize = this.getImageSize(size);\n    return `https://twitter.com/${this.sourceId}/profile_image?size=${twitterImgSize}`;\n  }\n\n  private getImageSize(size: number) {\n    if (size <= 24) {\n      return 'mini';\n    }\n\n    if (size <= 48) {\n      return 'normal';\n    }\n\n    if (size <= 73) {\n      return 'bigger';\n    }\n\n    return 'original';\n  }\n\n}\n","import { AsyncSource } from './async-source';\nimport { AvatarSource } from './avatar-source.enum';\n\n/**\n *  Google source impelementation.\n *  Fetch avatar source based on google identifier\n *  and image size\n */\nexport class Google extends AsyncSource {\n  readonly sourceType: AvatarSource = AvatarSource.GOOGLE;\n\n  constructor(sourceId: string) {\n    super(sourceId);\n  }\n\n  public getAvatar(): string {\n    return `https://picasaweb.google.com/data/entry/api/user/${this.sourceId}?alt=json`;\n  }\n\n\n  /**\n   * Extract google avatar from json data\n   */\n  public processResponse(data: any, size?: number): string {\n    const avatarSrc = data.entry.gphoto$thumbnail.$t;\n    if (avatarSrc) {\n      return avatarSrc.replace('s64', 's' + size);\n    }\n  }\n}\n","import { Source } from './source';\nimport { AvatarSource } from './avatar-source.enum';\n/**\n *  Custom source impelementation.\n *  return custom image as an avatar\n *\n */\nexport class Custom implements Source {\n  readonly sourceType: AvatarSource = AvatarSource.CUSTOM;\n\n  constructor(public sourceId: string) {\n  }\n\n  public getAvatar(): string {\n    return this.sourceId;\n  }\n}\n","import { Source } from \"./source\";\nimport { AvatarSource } from \"./avatar-source.enum\";\n\n/**\n * Initials source impelementation.\n * return the initals of the given value\n */\nexport class Initials implements Source {\n  \n  readonly sourceType: AvatarSource = AvatarSource.INITIALS;\n\n  constructor(\n    public sourceId: string\n  ) { }\n\n  public getAvatar(initialsSize: number): string {\n    return this.getInitials(this.sourceId, initialsSize);\n  }\n\n  /**\n   * Returns the initial letters of a name in a string.\n   */\n  private getInitials(name: string, size: number): string {\n    \n    name = name ? name.trim() : null;\n    \n    if (!name) {\n      return '';\n    }\n    \n    const initials = name.split(\" \");\n    \n    if (size && size < initials.length) {\n      return this.constructInitials(initials.slice(0, size));\n    } else {\n      return this.constructInitials(initials);\n    }\n  }\n\n  /**\n   * Iterates a person's name string to get the initials of each word in uppercase.\n   */\n  private constructInitials(elements: string[]): string {\n    if (!elements || !elements.length) {\n      return '';\n    }\n\n    return elements\n      .filter(element => element && element.length > 0)\n      .map(element => element[0].toUpperCase())\n      .join('');\n  }\n}\n","import isRetina from 'is-retina';\nimport { Md5 } from 'ts-md5/dist/md5';\nimport { Source } from './source';\nimport { AvatarSource } from './avatar-source.enum';\n\n/**\n *  Gravatar source impelementation.\n *  Fetch avatar source based on gravatar email\n */\nexport class Gravatar implements Source {\n  readonly sourceType: AvatarSource = AvatarSource.GRAVATAR;\n  public sourceId: string;\n\n  constructor(public value: string) {\n    this.sourceId = value.match('^[a-f0-9]{32}$') ? value : Md5.hashStr(value).toString();\n  }\n\n  public getAvatar(size: number): string {\n    const avatarSize = isRetina() ? size * 2 : size;\n    return `https://secure.gravatar.com/avatar/${this.sourceId}?s=${avatarSize}&d=404`;\n  }\n}\n","import { Source } from './source';\nimport { AvatarSource } from './avatar-source.enum';\n/**\n *  Skype source impelementation.\n *  Fetch avatar source based on skype identifier\n */\nexport class Skype implements Source {\n  readonly sourceType: AvatarSource = AvatarSource.SKYPE;\n\n  constructor(public sourceId: string) {\n  }\n\n  public getAvatar(): string {\n    return `https://api.skype.com/users/${this.sourceId}/profile/avatar`;\n  }\n}\n","import { Source } from './source';\nimport { AvatarSource } from './avatar-source.enum';\n\n/**\n *  Value source impelementation.\n *  return the value as avatar\n */\nexport class Value implements Source {\n  readonly sourceType: AvatarSource = AvatarSource.VALUE;\n\n  constructor(public sourceId: string) {\n  }\n\n  public getAvatar(): string {\n    return this.sourceId;\n  }\n}\n","import { AsyncSource } from './async-source';\nimport { AvatarSource } from './avatar-source.enum';\n\n/**\n *  Vkontakte source impelementation.\n *  Fetch avatar source based on vkontakte identifier\n *  and image size\n */\nconst apiVersion = 5.8;\nexport class Vkontakte extends AsyncSource {\n  readonly sourceType: AvatarSource = AvatarSource.VKONTAKTE;\n\n  constructor(sourceId: string) {\n    super(sourceId);\n  }\n\n  public getAvatar(size: number): string {\n    const imgSize = this.getImageSize(size);\n    return `https://api.vk.com/method/users.get?user_id=${this.sourceId}&v=${apiVersion}&fields=${imgSize}`;\n  }\n\n   /**\n   * extract vkontakte avatar from json data\n   */\n  public processResponse(data: any): string {\n    // avatar key property is the size used to generate avatar url\n    // size property is always the last key in the response object\n    const sizeProperty = Object.keys(data['response'][0]).pop();\n    // return avatar src\n    return data['response'][0][sizeProperty];\n  }\n\n  /**\n   * Returns image size related to vkontakte API\n   * @param size\n   */\n  private getImageSize(size: number): string {\n    if (size <= 50) {\n      return 'photo_50';\n    }\n\n    if (size <= 100) {\n      return 'photo_100';\n    }\n\n    if (size <= 200) {\n      return 'photo_200';\n    }\n\n    return 'photo_max';\n  }\n\n}\n","import { AsyncSource } from './async-source';\nimport { AvatarSource } from './avatar-source.enum';\n\n/**\n *  Github source impelementation.\n *  Fetch avatar source based on github identifier\n */\nexport class Github extends AsyncSource {\n  readonly sourceType: AvatarSource = AvatarSource.GITHUB;\n\n  constructor(sourceId: string) {\n    super(sourceId);\n  }\n\n  public getAvatar(): string {\n    return `https://api.github.com/users/${this.sourceId}`;\n  }\n\n  /**\n  * extract github avatar from json data\n  */\n public processResponse(data: any, size?: number): string {\n    if (size) {\n      return `${data.avatar_url}&s=${size}`;\n    }\n    return data.avatar_url;\n  }\n\n\n}\n","import { Source } from \"./source\";\nimport { Facebook } from \"./facebook\";\nimport { Twitter } from \"./twitter\";\nimport { Google } from \"./google\";\nimport { Custom } from \"./custom\";\nimport { Initials } from \"./initials\";\nimport { Gravatar } from \"./gravatar\";\nimport { Skype } from \"./skype\";\nimport { Value } from \"./value\";\nimport { Vkontakte } from \"./vkontakte\";\nimport { Github } from \"./github\";\n\nimport { Injectable } from \"@angular/core\";\nimport { SourceCreator } from \"./source.creator\";\nimport { AvatarSource } from \"./avatar-source.enum\";\n\n/**\n * Factory class that implements factory method pattern.\n * Used to create Source implementation class based\n * on the source Type\n */\n@Injectable()\nexport class SourceFactory {\n  private sources: { [key: string]: SourceCreator } = {};\n\n  constructor() {\n    this.sources[AvatarSource.FACEBOOK] = Facebook;\n    this.sources[AvatarSource.TWITTER] = Twitter;\n    this.sources[AvatarSource.GOOGLE] = Google;\n    this.sources[AvatarSource.SKYPE] = Skype;\n    this.sources[AvatarSource.GRAVATAR] = Gravatar;\n    this.sources[AvatarSource.CUSTOM] = Custom;\n    this.sources[AvatarSource.INITIALS] = Initials;\n    this.sources[AvatarSource.VALUE] = Value;\n    this.sources[AvatarSource.VKONTAKTE] = Vkontakte;\n    this.sources[AvatarSource.GITHUB] = Github;\n  }\n\n  public newInstance(sourceType: AvatarSource, sourceValue: string): Source {\n    return new this.sources[sourceType](sourceValue);\n  }\n}\n","import { InjectionToken } from \"@angular/core\";\n\nimport { AvatarConfig } from \"./avatar-config\";\n/**\n * Token used to inject the AvatarConfig object\n */\nexport const AVATAR_CONFIG = new InjectionToken<AvatarConfig>(\"avatar.config\");\n","import { Observable } from \"rxjs\";\nimport { HttpClient } from \"@angular/common/http\";\n\nimport { AVATAR_CONFIG } from \"./avatar-config.token\";\nimport { AvatarConfig } from \"./avatar-config\";\nimport { Injectable, Inject, Optional } from \"@angular/core\";\nimport { AvatarSource } from \"./sources/avatar-source.enum\";\n\n/**\n * list of Supported avatar sources\n */\nconst defaultSources = [\n  AvatarSource.FACEBOOK,\n  AvatarSource.GOOGLE,\n  AvatarSource.TWITTER,\n  AvatarSource.VKONTAKTE,\n  AvatarSource.SKYPE,\n  AvatarSource.GRAVATAR,\n  AvatarSource.GITHUB,\n  AvatarSource.CUSTOM,\n  AvatarSource.INITIALS,\n  AvatarSource.VALUE\n];\n\n/**\n * list of default colors\n */\nconst defaultColors = [\n  \"#1abc9c\",\n  \"#3498db\",\n  \"#f1c40f\",\n  \"#8e44ad\",\n  \"#e74c3c\",\n  \"#d35400\",\n  \"#2c3e50\",\n  \"#7f8c8d\"\n];\n\n/**\n * Provides utilities methods related to Avatar component\n */\n@Injectable()\nexport class AvatarService {\n  public avatarSources: AvatarSource[] = defaultSources;\n  public avatarColors: string[] = defaultColors;\n\n  constructor(\n    @Optional()\n    @Inject(AVATAR_CONFIG)\n    private avatarConfig: AvatarConfig,\n    private http: HttpClient\n  ) {\n    if (this.avatarConfig) {\n      this.overrideAvatarSources();\n      this.overrideAvatarColors();\n    }\n  }\n\n  public fetchAvatar(avatarUrl: string): Observable<any> {\n    return this.http.get(avatarUrl);\n  }\n\n  public getRandomColor(avatarText: string): string {\n    if (!avatarText) {\n      return \"transparent\";\n    }\n    const asciiCodeSum = this.calculateAsciiCode(avatarText);\n    return this.avatarColors[asciiCodeSum % this.avatarColors.length];\n  }\n\n  public copmareSources(\n    sourceType1: AvatarSource,\n    sourceType2: AvatarSource\n  ): number {\n    return (\n      this.getSourcePriority(sourceType1) - this.getSourcePriority(sourceType2)\n    );\n  }\n\n  public isSource(source: string): boolean {\n    return this.avatarSources.includes(source as AvatarSource);\n  }\n\n  public isTextAvatar(sourceType: AvatarSource): boolean {\n    return [AvatarSource.INITIALS, AvatarSource.VALUE].includes(sourceType);\n  }\n\n  private overrideAvatarSources(): void {\n    // TODO: add sources to avatarConfig and implement this\n  }\n\n  private overrideAvatarColors(): void {\n    if (this.avatarConfig.colors && this.avatarConfig.colors.length > 0) {\n      this.avatarColors = this.avatarConfig.colors;\n    }\n  }\n\n  private calculateAsciiCode(value: string): number {\n    return value\n      .split(\"\")\n      .map(letter => letter.charCodeAt(0))\n      .reduce((previous, current) => previous + current);\n  }\n\n  private getSourcePriority(sourceType: AvatarSource) {\n    return this.avatarSources.indexOf(sourceType);\n  }\n\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ElementRef,\n  OnChanges,\n  SimpleChange\n} from \"@angular/core\";\n\nimport { Source } from \"./sources/source\";\nimport { AsyncSource } from \"./sources/async-source\";\nimport { SourceFactory } from \"./sources/source.factory\";\nimport { AvatarService } from \"./avatar.service\";\nimport { AvatarSource } from \"./sources/avatar-source.enum\";\n\n/**\n * Universal avatar component that\n * generates avatar from different sources\n *\n * export\n * class AvatarComponent\n * implements {OnChanges}\n */\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: \"ngx-avatar\",\n  styles: [\n    `\n      :host {\n        border-radius: \"50%\";\n      }\n    `\n  ],\n  template: `\n    <div (click)=\"handleClickEvent($event)\" class=\"avatar-container\" [ngStyle]=\"hostStyle\">\n    <img *ngIf=\"src\"\n      [src]=\"src\"\n      [width]=\"size\"\n      [height]=\"size\"\n      [ngStyle]=\"avatarStyle\"\n      (error)=\"fetch($event)\"\n      class=\"avatar-content\"\n     />\n\n   <div *ngIf=\"data && !src\"\n     [ngStyle]=\"avatarStyle\"\n     class=\"avatar-content\">{{data}}</div>\n   </div>`\n})\nexport class AvatarComponent implements OnChanges {\n  @Input()\n  round: boolean = true;\n  @Input()\n  size: number = 50;\n  @Input()\n  textSizeRatio: number = 3;\n  @Input()\n  bgColor: string;\n  @Input()\n  fgColor = \"#FFF\";\n  @Input()\n  borderColor: string;\n  @Input()\n  style: any = {};\n  @Input()\n  cornerRadius = 0;\n  @Input(\"facebookId\")\n  facebook: string;\n  @Input(\"twitterId\")\n  twitter: string;\n  @Input(\"googleId\")\n  google: string;\n  @Input(\"vkontakteId\")\n  vkontakte: string;\n  @Input(\"skypeId\")\n  skype: string;\n  @Input(\"gravatarId\")\n  gravatar: string;\n  @Input(\"githubId\")\n  github: string;\n  @Input(\"src\")\n  custom: string;\n  @Input(\"name\")\n  initials: string;\n  @Input(\"value\")\n  value: string;\n  @Input(\"placeholder\")\n  placeholder: string;\n  @Input(\"initialsSize\")\n  initialsSize: number;\n  @Output()\n  clickOnAvatar: EventEmitter<any> = new EventEmitter<any>();\n\n  // avatar img src\n  public src: string;\n  // avatar text value\n  public data: string;\n  public avatarStyle: any = {};\n  public hostStyle: any = {};\n\n  private _currentSource = 0;\n  private _sources: Source[] = Array();\n\n  constructor(\n    public elementRef: ElementRef,\n    public sourceFactory: SourceFactory,\n    private avatarService: AvatarService\n  ) { }\n\n  // handle click event\n  handleClickEvent(event: any) {\n    if (event) {\n      this.clickOnAvatar.emit(this._sources[this._currentSource - 1]);\n    }\n  }\n\n  /**\n   * Detect inputs change\n   *\n   * param {{ [propKey: string]: SimpleChange }} changes\n   *\n   * memberof AvatarComponent\n   */\n  ngOnChanges(changes: { [propKey: string]: SimpleChange }) {\n    for (const propName in changes) {\n      if (this.avatarService.isSource(propName)) {\n        const currentValue = changes[propName].currentValue;\n        this._addSource(AvatarSource[propName.toUpperCase()], currentValue);\n      }\n    }\n    // reintialize the avatar component when a source property value has changed\n    // the fallback system must be re-invoked with the new values.\n    this._initializeAvatar();\n  }\n\n  /**\n   * Initialize the avatar component and its fallback system\n   */\n  _initializeAvatar() {\n    this._currentSource = 0;\n    if (this._sources.length > 0 && this._sources[this._currentSource]) {\n      // Order sources array by source priority\n      this._sources.sort((source1, source2) => this.avatarService.copmareSources(source1.sourceType, source2.sourceType));\n      // Host style\n      this.hostStyle = {\n        width: this.size + \"px\",\n        height: this.size + \"px\"\n      };\n      // Fetch avatar source\n      this.fetch();\n    }\n  }\n\n  /**\n   * Fetch avatar source\n   *\n   * param {any} event\n   *\n   * memberOf AvatarComponent\n   */\n  fetch(event?: any) {\n    const avatarSource = this._sources[this._currentSource];\n    if (!avatarSource) {\n      return false;\n    }\n    if (this.avatarService.isTextAvatar(avatarSource.sourceType)) {\n      this.data = avatarSource.getAvatar(this.initialsSize);\n      this.src = undefined;\n      this.avatarStyle = this._initialsStyle(avatarSource.sourceId);\n    } else {\n      this.avatarStyle = this._imageStyle();\n      if (avatarSource instanceof AsyncSource) {\n        this._fetchAsyncAvatar(avatarSource);\n      } else {\n        this.src = avatarSource.getAvatar(this.size);\n      }\n    }\n    this._currentSource++;\n  }\n\n  /**\n   *\n   * returns initials style\n   *\n   * memberOf AvatarComponent\n   */\n  _initialsStyle(avatarValue: string) {\n    return {\n      textAlign: \"center\",\n      borderRadius: this.round ? \"100%\" : this.cornerRadius + \"px\",\n      border: this.borderColor ? \"1px solid \" + this.borderColor : \"\",\n      textTransform: \"uppercase\",\n      color: this.fgColor,\n      backgroundColor: this.bgColor\n        ? this.bgColor\n        : this.avatarService.getRandomColor(avatarValue),\n      font:\n        Math.floor(this.size / this.textSizeRatio) +\n        \"px Helvetica, Arial, sans-serif\",\n      lineHeight: this.size + \"px\",\n      ...this.style\n    };\n  }\n\n  /**\n   *\n   * returns image style\n   *\n   * memberOf AvatarComponent\n   */\n  _imageStyle() {\n    return {\n      maxWidth: \"100%\",\n      borderRadius: this.round ? \"50%\" : this.cornerRadius + \"px\",\n      border: this.borderColor ? \"1px solid \" + this.borderColor : \"\",\n      width: this.size,\n      height: this.size,\n      ...this.style\n    };\n  }\n  /**\n   * Fetch avatar image asynchrounsly.\n   *\n   * param {Source} source represents avatar source\n   * memberof AvatarComponent\n   */\n  _fetchAsyncAvatar(source: AsyncSource) {\n    this.avatarService.fetchAvatar(source.getAvatar()).subscribe(\n      data => {\n        // extract avatar image from the response data\n        this.src = source.processResponse(data, this.size);\n      },\n      err => {\n        console.error(\n          `ngx-avatar: error while fetching ${source.sourceType} avatar `\n        );\n      }\n    );\n  }\n\n  /**\n   * Add avatar source\n   *\n   * param sourceType avatar source type e.g facebook,twitter, etc.\n   * param sourceValue  source value e.g facebookId value, etc.\n   */\n  _addSource(sourceType: AvatarSource, sourceValue: string) {\n    if (sourceValue) {\n      if (!this._updateExistingSource(sourceType, sourceValue)) {\n        this._sources.push(\n          this.sourceFactory.newInstance(sourceType, sourceValue)\n        );\n      }\n    }\n  }\n  /**\n   * This method check wether an avatar source has been added. If so\n   * the source value will be updated with the new value passed as\n   * paramater.\n   * It returns true if the source exists and update has been performed,\n   * returns false if the source was not found\n   *\n   * param {string} sourceType the type of the source\n   * param {string} sourceValue the new value of the source\n   *\n   * memberof AvatarComponent\n   */\n  _updateExistingSource(sourceType: string, sourceValue: string) {\n    const sourceIndex = this._sources.findIndex(\n      source => source.sourceType === sourceType.toUpperCase()\n    );\n    if (sourceIndex > -1) {\n      this._sources[sourceIndex].sourceId = sourceValue;\n      return true;\n    }\n    return false;\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { AvatarComponent } from './avatar.component';\nimport { SourceFactory } from './sources/source.factory';\nimport { AvatarService } from './avatar.service';\nimport { AvatarConfig } from './avatar-config';\nimport { AVATAR_CONFIG } from './avatar-config.token';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule\n  ],\n  declarations: [\n    AvatarComponent\n  ],\n  providers: [\n    SourceFactory,\n    AvatarService\n  ],\n  exports: [\n    AvatarComponent\n  ]\n})\nexport class AvatarModule {\n  static forRoot(avatarConfig?: AvatarConfig): ModuleWithProviders {\n    return {\n      ngModule: AvatarModule,\n      providers: [\n        { provide: AVATAR_CONFIG, useValue: avatarConfig ? avatarConfig:{} }]\n    };\n  }\n}\n"],"names":["tslib_1.__extends"],"mappings":"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"}
